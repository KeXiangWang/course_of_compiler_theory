.data
global_MAX_NUM: .word 100
string_0: .asciiz  " x = "
string_1: .asciiz  " y = "
string_2: .asciiz  " SWAP x = "
string_3: .asciiz  " SWAP y = "
string_4: .asciiz  " OVERFLOW!          "
string_5: .asciiz  " complete number: "
string_6: .asciiz  "  "
string_7: .asciiz  "          "
string_8: .asciiz  " ---------------------------------------------------------------          "
string_9: .asciiz  " b = "
string_10: .asciiz  " ---------------------------------------------------------------          "
string_11: .asciiz  " "
string_12: .asciiz  "          "
string_13: .asciiz  "          The total is "
string_14: .asciiz  " 10! = "
.text
j f_main




f_factorial:
addiu $sp $sp -56
sw $ra 52($sp)
sw $fp 48($sp)
sw $s0 44($sp)
sw $s1 40($sp)
sw $s2 36($sp)
sw $s3 32($sp)
sw $a0 88($sp)
label_0:
lw $t0 88($sp)	#n
li $t1 1	#const_int_2 : 1
sw $t0 88($sp)	# n
bgt $t0 $t1 label_1
label_2:
li $v0 1	#const_int_5 : 1
j f_factorial_return
label_1:
lw $t0 88($sp)	#n
subiu $t1 $t0 1 	# sub_0
sw $t0 88($sp)	# n
sw $t1 8($sp)	# sub_0
# call func: factorial
addiu $sp $sp -4
lw $a0 12($sp)	#sub_0
addiu $sp $sp -32
jal f_factorial
addiu $sp $sp 32
addiu $sp $sp 4
lw $a0 88($sp)
move $t0 $v0
# back from func: factorial
lw $t1 88($sp)	#n
mul $t2 $t1 $t0 	# mult_1
move $v0 $t2
j f_factorial_return
sw $t0 4($sp)	# fcall_13
sw $t1 88($sp)	# n
sw $t2 0($sp)	# mult_1
label_3:
f_factorial_return:
lw $s0 44($sp)
lw $s1 40($sp)
lw $s2 36($sp)
lw $s3 32($sp)
lw $ra 52($sp)
lw $fp 48($sp)
addiu $sp $sp 56
jr $ra


f_mod:
addiu $sp $sp -60
sw $ra 56($sp)
sw $fp 52($sp)
sw $s0 48($sp)
sw $s1 44($sp)
sw $s2 40($sp)
sw $s3 36($sp)
sw $s4 32($sp)
sw $a0 92($sp)
sw $a1 96($sp)
label_4:
lw $t0 92($sp)	#x
lw $t1 96($sp)	#y
div $t2 $t0 $t1 	# div_2
mul $t3 $t2 $t1 	# mult_3
subu $t4 $t0 $t3 	# sub_4
move $t0 $t4	# x
move $v0 $t4
j f_mod_return
sw $t0 92($sp)	# x
sw $t1 96($sp)	# y
sw $t2 8($sp)	# div_2
sw $t3 4($sp)	# mult_3
sw $t4 0($sp)	# sub_4
f_mod_return:
lw $s0 48($sp)
lw $s1 44($sp)
lw $s2 40($sp)
lw $s3 36($sp)
lw $s4 32($sp)
lw $ra 56($sp)
lw $fp 52($sp)
addiu $sp $sp 60
jr $ra


f_swap:
addiu $sp $sp -52
sw $ra 48($sp)
sw $fp 44($sp)
sw $s0 40($sp)
sw $s1 36($sp)
sw $s2 32($sp)
sw $a0 84($sp)
sw $a1 88($sp)
label_5:
li $v0 4  # printf string
la $a0 string_0
syscall
li $v0 1  # printf int
lw $a0 84($sp)	#x
syscall
li $v0 4  # printf string
la $a0 string_1
syscall
li $v0 1  # printf int
lw $a0 88($sp)	#y
syscall
lw $t0 84($sp)	#x
move $s0 $t0	# temp
lw $t1 88($sp)	#y
move $t0 $t1	# x
move $t1 $t0	# y
li $v0 4  # printf string
la $a0 string_2
syscall
li $v0 1  # printf int
move $a0 $t1
syscall
li $v0 4  # printf string
la $a0 string_3
syscall
li $v0 1  # printf int
move $a0 $t0
syscall
f_swap_return:
lw $s0 40($sp)
lw $s1 36($sp)
lw $s2 32($sp)
lw $ra 48($sp)
lw $fp 44($sp)
addiu $sp $sp 52
jr $ra


f_complete_num:
addiu $sp $sp -712
sw $ra 708($sp)
sw $fp 704($sp)
sw $s0 700($sp)
sw $s1 696($sp)
sw $s2 692($sp)
sw $s3 688($sp)
sw $s4 684($sp)
sw $s5 680($sp)
sw $s6 676($sp)
sw $s7 672($sp)
sw $a0 744($sp)
label_6:
lw $t0 744($sp)	#val
move $s1 $t0	# j
sw $t0 744($sp)	# val
label_7:
li $t0 -1 	# sub_5
move $s3 $t0	# n
move $s6 $s1	# s
li $s0 1	# i
sw $t0 96($sp)	# sub_5
label_8:
div $t0 $s1 $s0 	# div_6
mul $t1 $t0 $s0 	# mult_7
move $t2 $t1	# x1
sw $t0 92($sp)	# div_6
sw $t1 88($sp)	# mult_7
sw $t2 132($sp)	# x1
# call func: mod
addiu $sp $sp -8
move $a0 $s1
move $a1 $s0
addiu $sp $sp -32
jal f_mod
addiu $sp $sp 32
addiu $sp $sp 8
lw $a0 744($sp)
move $t0 $v0
# back from func: mod
li $t1 0	#const_int_59 : 0
sw $t0 84($sp)	# fcall_58
bne $t0 $t1 label_9
label_10:
addiu $t0 $s3 1 	# add_8
move $s3 $t0	# n
subu $t1 $s6 $s0 	# sub_9
move $s6 $t1	# s
li $t2 128	#const_int_71 : 128
sw $t0 80($sp)	# add_8
sw $t1 76($sp)	# sub_9
blt $t0 $t2 label_11
label_12:
li $v0 4  # printf string
la $a0 string_4
syscall
j label_13
label_11:
move $t8  $s3
sll $t8 $t8 2
addu $t8 $t8 $sp
sw $s0 152($t8 )
label_13:
j label_14
label_9:
label_14:
addiu $t0 $s0 1 	# add_10
move $s0 $t0	# i
sw $t0 72($sp)	# add_10
bge $t0 $s1 label_15
j label_8
label_15:
li $t0 0	#const_int_93 : 0
bne $s6 $t0 label_16
label_17:
li $v0 4  # printf string
la $a0 string_5
syscall
li $v0 1  # printf int
move $a0 $s1
syscall
li $s0 0	# i
label_18:
li $v0 4  # printf string
la $a0 string_6
syscall
li $v0 1  # printf int
move $a0  $s0
sll $a0 $a0 2
addu $a0 $a0 $sp
lw $a0 152($a0 )
syscall
addiu $t0 $s0 1 	# add_11
move $s0 $t0	# i
sw $t0 68($sp)	# add_11
bgt $t0 $s3 label_19
j label_18
label_19:
li $v0 4  # printf string
la $a0 string_7
syscall
j label_20
label_16:
label_20:
addiu $t0 $s1 1 	# add_12
move $s1 $t0	# j
lw $t1 global_MAX_NUM	#MAX_NUM
sw $t0 64($sp)	# add_12
sw $t1  global_MAX_NUM	#MAX_NUM
bge $t0 $t1 label_21
j label_7
label_21:
li $v0 4  # printf string
la $a0 string_8
syscall
li $s5 0	# a
li $s0 0	# i
label_22:
mul $t0 $s5 $s0 	# mult_13
move $s4 $t0	# b
mul $t1 $s1 $s3 	# mult_14
move $t2 $t1	# c
move $s5 $t0	# a
addu $t3 $t0 $t0 	# add_16
addu $t4 $t3 $t1 	# add_17
move $s5 $t4	# a
addiu $t5 $s0 1 	# add_18
move $s0 $t5	# i
lw $t6 global_MAX_NUM	#MAX_NUM
sw $t0 60($sp)	# mult_13
sw $t1 56($sp)	# mult_14
sw $t2 100($sp)	# c
sw $t3 52($sp)	# add_16
sw $t4 48($sp)	# add_17
sw $t5 44($sp)	# add_18
sw $t6  global_MAX_NUM	#MAX_NUM
bge $t5 $t6 label_23
j label_22
label_23:
move $s4 $s5	# b
li $s0 0	# i
label_24:
addu $t0 $s4 $s0 	# add_19
move $s4 $t0	# b
addiu $t1 $s0 1 	# add_20
move $s0 $t1	# i
lw $t2 global_MAX_NUM	#MAX_NUM
sw $t0 40($sp)	# add_19
sw $t1 36($sp)	# add_20
sw $t2  global_MAX_NUM	#MAX_NUM
bge $t1 $t2 label_25
j label_24
label_25:
li $v0 4  # printf string
la $a0 string_9
syscall
li $v0 1  # printf int
move $a0 $s4
syscall
li $v0 4  # printf string
la $a0 string_10
syscall
li $s7 0	# h
li $t0 1	# leap
li $s2 2	# m
sw $t0 116($sp)	# leap
label_26:
li $t0 2	#const_int_187 : 2
div $t1 $s2 $t0 	# div_21
move $t2 $t1	# k2
li $s0 2	# i
sw $t1 32($sp)	# div_21
sw $t2 124($sp)	# k2
label_27:
div $t0 $s2 $s0 	# div_22
mul $t1 $t0 $s0 	# mult_23
move $t2 $t1	# x2
sw $t0 28($sp)	# div_22
sw $t1 24($sp)	# mult_23
sw $t2 112($sp)	# x2
# call func: mod
addiu $sp $sp -8
move $a0 $s2
move $a1 $s0
addiu $sp $sp -32
jal f_mod
addiu $sp $sp 32
addiu $sp $sp 8
lw $a0 744($sp)
move $t0 $v0
# back from func: mod
li $t1 0	#const_int_201 : 0
sw $t0 20($sp)	# fcall_200
bne $t0 $t1 label_28
label_29:
li $t0 0	# leap
sw $t0 116($sp)	# leap
j label_30
label_28:
label_30:
addiu $t0 $s0 1 	# add_24
move $s0 $t0	# i
lw $t1 124($sp)	#k2
sw $t0 16($sp)	# add_24
sw $t1 124($sp)	# k2
bgt $t0 $t1 label_31
j label_27
label_31:
lw $t0 116($sp)	#leap
li $t1 1	#const_int_219 : 1
sw $t0 116($sp)	# leap
bne $t0 $t1 label_32
label_33:
li $v0 4  # printf string
la $a0 string_11
syscall
li $v0 1  # printf int
move $a0 $s2
syscall
addiu $t0 $s7 1 	# add_25
move $s7 $t0	# h
li $t1 10	#const_int_229 : 10
div $t2 $t0 $t1 	# div_26
li $t3 10	#const_int_231 : 10
mul $t4 $t2 $t3 	# mult_27
move $t5 $t4	# x2
sw $t0 12($sp)	# add_25
sw $t2 8($sp)	# div_26
sw $t4 4($sp)	# mult_27
sw $t5 112($sp)	# x2
bne $t4 $t0 label_34
label_35:
li $v0 4  # printf string
la $a0 string_12
syscall
j label_36
label_34:
label_36:
j label_37
label_32:
label_37:
li $t0 1	# leap
addiu $t1 $s2 1 	# add_28
move $s2 $t1	# m
lw $t2 global_MAX_NUM	#MAX_NUM
sw $t0 116($sp)	# leap
sw $t1 0($sp)	# add_28
sw $t2  global_MAX_NUM	#MAX_NUM
bgt $t1 $t2 label_38
j label_26
label_38:
li $v0 4  # printf string
la $a0 string_13
syscall
li $v0 1  # printf int
move $a0 $s7
syscall
f_complete_num_return:
lw $s0 700($sp)
lw $s1 696($sp)
lw $s2 692($sp)
lw $s3 688($sp)
lw $s4 684($sp)
lw $s5 680($sp)
lw $s6 676($sp)
lw $s7 672($sp)
lw $ra 708($sp)
lw $fp 704($sp)
addiu $sp $sp 712
jr $ra


f_main:
addiu $sp $sp -48
label_39:
# call func: factorial
addiu $sp $sp -4
li $a0 10	#const_int_257 : 10
addiu $sp $sp -32
jal f_factorial
addiu $sp $sp 32
addiu $sp $sp 4
move $t0 $v0
# back from func: factorial
move $s0 $t0	# n
li $v0 4  # printf string
la $a0 string_14
syscall
li $v0 1  # printf int
move $a0 $t0
syscall
sw $t0 0($sp)	# fcall_258
# call voidfunc: swap
addiu $sp $sp -8
li $a0 5	#const_int_262 : 5
li $a1 10	#const_int_263 : 10
addiu $sp $sp -32
jal f_swap
addiu $sp $sp 32
addiu $sp $sp 8
# back from voidfunc: swap
# call voidfunc: complete_num
addiu $sp $sp -4
li $a0 2	#const_int_265 : 2
addiu $sp $sp -32
jal f_complete_num
addiu $sp $sp 32
addiu $sp $sp 4
# back from voidfunc: complete_num
f_main_return:
