#pragma once

enum ErrorType {
	TYPE_OF_IDENTIFIER_EXPECTED,
	UNEXPECTED_IDENTIFIER,
	UNDEFINED_IDENTIFIER,
	IDENTIFIER_ALREADY_DEFINED,
	NONAGTIVE_INT_EXPECTED,
	UNEXPECTED_VAR_DECLARE,
	RIGHT_PARENTHESES_EXPECTED,
	RIGHT_BRACE_EXPECTED,
	EQUAL_EXPECTED,
	BECOME_EXPECTED,
	NUMBER_EXPECTED,
	IDENTIFIER_EXPECTED,
	ALPHA_EXPECTED,
	SEMICOLON_EXPECTED,
	LEFT_PARENTHESES_EXPECTED,
	UNEXPECTED_SIGN,
	LEFT_BRACKET_EXPECTED,
	RIGHT_BRACKET_EXPECTED,
	WRONG_FUNCTION_CALL,
	LEFT_BRACE_EXPECTED,
	WHILE_EXPECTED,
	COLON_EXPECTED,
	ASSIGN_EXPECTED,
	VARIABLE_EXPECTED,
	INVALID_RETURN,
	WRONG_RETURN_TYPE,
	WRONG_ARGUMENT_LIST,
	MODIFY_CONST_VALUE,
	WRONG_MAIN_TYPE,
	WRONG_QUANTITY_TYPE,
	WRONG_ASSIGNMENT_TYPE,
	MAIN_REPEAT_DEFINE,
};

using std::unordered_map;
using std::string;

class ErrorHandler {
public:
	ErrorHandler();
	bool errorHaveOccured();
	void report(int lineCount,string currentLine, ErrorType errortype, bool ignore = false);
	bool errorOccured;

private:
	unordered_map<ErrorType, string> errorToString;
};

