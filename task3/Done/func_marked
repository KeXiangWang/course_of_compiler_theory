void MipsGenerator::generateFunc(Function *function, Quad *quad, int offset) {
	FunctionCall *func = static_cast<FunctionCall *>(quad);
	// pass args
	int temp = (func->parameters.size() << 2);
	exertCode.push_back("# call func: " + func->name);
	exertCode.push_back("subiu $sp $sp " + to_string(temp));
	int i;
	for (i = 0; i < 4 && i < (int)(func->parameters.size()); i++) {
		moveToReg(function, func->parameters[i], "$a" + to_string(i), temp);
		decreaseRef(func->parameters[i]);
	}
	for (; i < (int)(func->parameters.size()); i++) {
		moveToReg(function, func->parameters[i], "$t8", temp);
		decreaseRef(func->parameters[i]);
		exertCode.push_back("sw $t8 " + to_string(i << 2) + "($sp)");
	}
	// save $t0~$t7
	exertCode.push_back("addiu $sp $sp -32");
	for (int i = 0; i < 8; i++) {
		exertCode.push_back("sw $t" + to_string(i) + " " + to_string(i << 2) + "($sp)");
	}
	// call
	exertCode.push_back("jal f_" + func->name);
	exertCode.push_back("nop");
	// restore $t0~$t7
	for (int i = 0; i < 8; i++) {
		exertCode.push_back("lw $t" + to_string(i) + " " + to_string(i << 2) + "($sp)");
	}
	exertCode.push_back("addiu $sp $sp 32");
	exertCode.push_back("addiu $sp $sp " + to_string((func->parameters.size() << 2)));
	// restore $a0~a3
	for (int i = 0; i < (int)(function->parameters.size()) && i < 4; i++) {
		int tmp = (i << 2) + offset + (8 << 2);
		exertCode.push_back("lw $a" + to_string(i) + " " + to_string(tmp) + "($sp)");
	}
	string reg = getReg(function, func, true);
	exertCode.push_back("move " + reg + " $v0");
	exertCode.push_back("# back from func: " + func->name);
}